<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<T3locallang>
	<meta type="array">
		<description>Contents of devlog csh</description>
		<type>CSH</type>
		<csh_table>_MOD_tools_txdevlogM1</csh_table>
		<fileId>EXT:devlog/locallang_csh_txdevlog.xml</fileId>
		<labelContext type="array">
		</labelContext>
	</meta>
	<data type="array">
		<languageKey index="default" type="array">
			<label index=".alttitle">Developer Log</label>
			<label index=".description">The Developer Log extension (devlog) provides logging functionality. It hooks into t3lib_div::devlog() to catch devlog events. A BE module gives an overview of the logged events. For more information read the extension manual, which can be found on typo3.org.</label>
			<label index=".syntax">If you want to make use of the devlog in your extension, simply call the following helper function with the appropriate parameters:
				t3lib_div::devlog($msg, $extKey, $severity = 0, $dataVar = false);

				The parameters are:
				$msg: Main log message (string)
				$extKey: Extension key (from which extension you are calling the log) (string)
				$severity: Severity: 0 is info, 1 is notice, 2 is warning, 3 is fatal error, -1 is "OK" message (integer)
				$dataVar: Additional data you want to pass to the logger (array)
			</label>
			<label index="crdate.alttitle">Log run time</label>
			<label index="crdate.description">This is the date and time at which the log entry was created.</label>
			<label index="crdate.details">
				All entries corresponding to the code execution are marked with the same date and time. This makes it possible to view them as a consistent group in the BE module. Such a group is called a "log run"
			</label>
			<label index="msg.alttitle">Log message</label>
			<label index="msg.description">The main message of the log entry.</label>
			<label index="severity.alttitle">Severity</label>
			<label index="severity.description">The severity gives you an impression of how serious the logged event is.</label>
			<label index="severity.details">
				There are five levels of severity, the higher the number, the more serious the event:
				Ok: These events indicate that everything went fine, no error occurred (at least up to that point where the event was created). No action needs to be taken.
				Info: These events are purely informational. They are normally used for debugging purposes only and require no special action.
				Notice: Abnormal condition, but not blocking. Notices are meant to raise attention. Processes have been completed, but things are not running as smoothly as they could and the condition should be investigated.
				Warning: These events are used to notify significant problems. Processes have been completed, but parts of them may be missing, wrong or corrupted. Warnings should not be ignored and action should definitely be taken.
				Error: These events signal that something went fatally wrong. Processes were not completed and action is definitely needed. Alternately this level may be used to point to a failed event, but in a process where failure can be expected, e.g. a login attempt with the wrong password.
			</label>
			<label index="_severity.image">EXT:devlog/res/csh_severities.png</label>
			<label index="extkey.alttitle">Extension</label>
			<label index="extkey.description">The component which triggered the event</label>
			<label index="extkey.details">
				The value is either an extension key or a reference to the core itself or some part of it. It depends on the logging implementation of the component which has triggered the event.
				One hint about excluded keys: There's an option in the extension manager to exclude some keys from being logged. Notice that if there were events registered with that key before you excluded it, those events will still be visible in the list.
			</label>
			<label index="location.alttitle">Call location</label>
			<label index="location.description">The class from which the devLog() call was made, with the line number.</label>
			<label index="pid.alttitle">Page</label>
			<label index="pid.description">The title of the page which was being processed when the event happened (if any). It's also the page where the record is stored.</label>
			<label index="pid.details">Events can also be found as page records in the web->list module. Note that events not triggered within a page context are stored at the root of the page tree.</label>
			<label index="cruser_id.alttitle">User</label>
			<label index="cruser_id.description">The BE user which was logged in the backend and triggered the event (if any).</label>
			<label index="cruser_id.details">This field is useful, if multiple BE users are triggering events at the same time, on the same pages or with the same components.</label>
			<label index="data_var.alttitle">Extra data</label>
			<label index="data_var.description">Extra data can provide an array with detailed information about the circumstances of the event.</label>
			<label index="data_var.details">
				There are almost no boundaries for this field, except that it is an array. In many cases, this field can contain the processed data, when the event has been triggered. For example, you could get the full stack debug trace when there is an SQL error. Another showcase would be to deliver be the relevant TS setup parts or any other configuration array.
				The value depends on the logging implementation of the component which has triggered the event.
			</label>
		</languageKey>
	</data>
</T3locallang>
